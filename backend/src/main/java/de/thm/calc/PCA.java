package de.thm.calc;

import de.thm.result.ResultCollector;
import de.thm.stat.TestResult;
import org.apache.commons.math3.linear.EigenDecomposition;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.stat.correlation.Covariance;

import java.util.Arrays;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;

class PCA {

    String[] names = new String[]{"sites.hiv.cd4_centralmemory.sherrill-mix_13", "sites.xmrv.cd4.roth_11", "sites.aav1-lpl.muscle.kaeppel_13", "sites.hiv.cd34.trobridge_06", "sites.hiv.cd4.wang_09", "sites.aav5.fibro.hueser", "sites.hiv.pbmc.mitchell_04", "sites.hiv.cd4_active.pace_12", "sites.hiv.macrophage.barr_06", "sites.sb.cd4.gogol-doering_16", "sites.hiv.cd4_resting.pace_12", "sites.pb.cd4.gogol-doering", "sites.hiv.cd4_activated.brady_09", "sites.aav.fibro.miller", "sites.aav2wt.fibro.hueser_14", "sites.aav2r.fibro.hueser_14", "sites.mlv.cd4.roth_11", "sites.fv.fibro.trobridge_06", "sites.aav.fibro.miller_05_reanalyzed", "sites.random", "sites.hiv.cd4_resting.brady_09", "sites.hiv.imr90.mitchell_04", "sites.fv.cd34.trobridge_06", "sites.hiv.cd4_blc-2.shan_11"};
    private double[][] pointsArray = new double[][]{
            new double[]{1.9509999999999998, 1.6909999999999998, 1.7209999999999999, 1.351, 1.811, 1.261, 0, 1.4709999999999999, 0, 0.02836726874657909, 1.301, 1.561, 0.25352525252525254, 3.441, 2.811, 2.5909999999999997, 1.751, 1.3809999999999998, 3.961, 2.0709999999999997, 2.271, 1.7009999999999998, 2.561, 1.121, 2.221, 1.1809999999999998, 1.041, 0.001, 1.1909999999999998, 1.2109999999999999, 0.8781929824561404},
            new double[]{1.4509999999999998, 1.621, 1.4909999999999999, 2.2609999999999997, 1.8909999999999998, 2.201, 0, 1.031, 0, 1.841, 1.311, 1.4409999999999998, 4.301, 2.2609999999999997, 5.351, 6.791, 3.181, 4.461, 1.4909999999999999, 1.261, 1.301, 1.071, 2.901, 2.771, 1.291, 2.641, 0.7761937984496123, 0.001, 1.1409999999999998, 2.441, 5.391},
            new double[]{0.6954444444444444, 1.061, 1.071, 1.261, 1.051, 1.4209999999999998, 0, 0.8705652173913044, 0, 0.3494320557491289, 1.091, 0.8859557522123894, 3.5309999999999997, 1.4009999999999998, 0.9019009009009008, 0.8484576271186441, 1.4409999999999998, 1.291, 0.971873786407767, 1.031, 1.021, 0.971873786407767, 1.1409999999999998, 1.081, 1.021, 1.371, 0.971873786407767, 0.001, 0.9813921568627451, 1.261, 1.4509999999999998},
            new double[]{2.191, 1.6709999999999998, 1.801, 0.8859557522123894, 1.6909999999999998, 1.361, 0, 2.2609999999999997, 0, 0.44152863436123346, 1.1909999999999998, 1.9509999999999998, 0.5086142131979695, 2.901, 1.811, 1.501, 1.351, 1.1909999999999998, 4.461, 2.561, 3.0909999999999997, 1.611, 2.371, 1.1409999999999998, 3.171, 1.111, 0.9184311926605504, 0.001, 1.6409999999999998, 1.101, 0.5301005291005292},
            new double[]{2.501, 1.8909999999999998, 1.9809999999999999, 1.7109999999999999, 2.3409999999999997, 1.281, 0, 2.0109999999999997, 0, 0.089261253309797, 1.311, 2.1109999999999998, 0.8140081300813008, 4.161000005, 2.941, 2.731, 1.7009999999999998, 1.521, 5.711, 3.541, 4.711, 1.9909999999999999, 4.041, 1.291, 4.661000005, 1.331, 0.8343333333333334, 0.001, 1.4409999999999998, 1.1909999999999998, 0.9533809523809523},
            new double[]{1.341, 1.2009999999999998, 1.2409999999999999, 1.081, 1.1309999999999998, 1.511, 0, 0.8557008547008548, 0, 4.911000005, 1.101, 1.2309999999999999, 4.921, 1.7209999999999999, 1.1409999999999998, 1.531, 0.9625384615384615, 1.4309999999999998, 1.1309999999999998, 1.111, 1.111, 1.2209999999999999, 1.1509999999999998, 1.2309999999999999, 1.111, 1.3809999999999998, 0.8630689655172414, 0.001, 1.021, 1.331, 1.8909999999999998},
            new double[]{2.671, 1.601, 1.4509999999999998, 1.7209999999999999, 2.061, 1.2109999999999999, 0, 1.1309999999999998, 0, 0.001, 1.271, 1.9109999999999998, 2.6109999999999998, 3.741, 2.521, 2.8409999999999997, 1.501, 0.45348868778280543, 4.801, 3.061, 3.8009999999999997, 1.7309999999999999, 4.131, 1.321, 3.561, 1.341, 0.7761937984496123, 0.001, 1.6409999999999998, 1.121, 0.685931506849315},
            new double[]{2.121, 1.811, 1.9809999999999999, 1.6309999999999998, 2.0909999999999997, 1.251, 0, 1.761, 0, 0.09623809523809523, 1.3809999999999998, 1.791, 1.541, 4.171, 3.201, 2.631, 1.511, 1.311, 4.28100001, 2.3609999999999998, 2.731, 1.9609999999999999, 2.941, 1.2209999999999999, 2.631, 1.4809999999999999, 1.001, 0.001, 1.361, 1.291, 0.8413361344537815},
            new double[]{1.801, 1.301, 1.2209999999999999, 0.5504505494505494, 1.321, 0.971873786407767, 0, 1.861, 0, 0.1821594202898551, 1.1809999999999998, 1.611, 0.8343333333333334, 2.651, 1.291, 1.301, 1.831, 0.9813921568627451, 2.8609999999999998, 1.8809999999999998, 2.061, 1.6309999999999998, 1.9609999999999999, 1.1709999999999998, 2.0309999999999997, 1.111, 0.7946507936507936, 19.19100003, 1.9209999999999998, 1.071, 0.7256376811594204},
            new double[]{1.511, 1.2209999999999999, 1.1809999999999998, 0.9533809523809523, 1.2309999999999999, 1.301, 0, 0.5386344086021505, 0, 0.3978253968253968, 1.1409999999999998, 1.021, 0.7643587786259541, 1.6309999999999998, 1.511, 1.331, 1.4309999999999998, 1.531, 1.7409999999999999, 1.1809999999999998, 1.1709999999999998, 1.101, 1.331, 1.031, 1.1809999999999998, 1.111, 0.9443962264150942, 1.751, 0.8557008547008548, 1.2309999999999999, 1.621},
            new double[]{1.9709999999999999, 1.6909999999999998, 1.771, 1.071, 1.841, 1.101, 0, 1.121, 0, 0.10150251256281408, 1.311, 1.4709999999999999, 0.4639629629629629, 3.901, 3.351, 2.921, 1.571, 1.301, 3.8609999999999998, 2.251, 2.451, 1.9509999999999998, 2.3409999999999997, 1.271, 2.431, 1.4009999999999998, 0.9910990099009901, 0.001, 1.1409999999999998, 1.331, 0.8484576271186441},
            new double[]{1.4909999999999999, 1.4109999999999998, 1.301, 2.021, 1.6409999999999998, 2.2609999999999997, 0, 0.7417407407407407, 0, 2.681, 1.291, 1.341, 4.411000005, 2.581, 3.141, 4.221, 3.0909999999999997, 4.021, 2.171, 1.3909999999999998, 1.4309999999999998, 1.261, 2.2609999999999997, 2.3209999999999997, 1.4309999999999998, 2.3409999999999997, 0.6144969325153374, 3.271, 1.581, 2.0509999999999997, 6.471},
            new double[]{2.371, 2.201, 2.3209999999999997, 1.3809999999999998, 2.631, 1.6909999999999998, 0, 2.501, 0, 0.001, 1.4609999999999999, 2.271, 1.261, 4.11100001, 3.0509999999999997, 2.751, 1.501, 1.571, 5.201000005, 2.881, 3.5709999999999997, 1.9309999999999998, 2.901, 1.621, 3.471, 1.9209999999999998, 0.9184311926605504, 0.001, 1.4909999999999999, 1.4609999999999999, 0.5504505494505494},
            new double[]{0.9533809523809523, 1.101, 1.2409999999999999, 2.151, 1.021, 1.081, 0, 1.3909999999999998, 0, 3.651, 1.121, 1.3909999999999998, 1.4009999999999998, 1.4509999999999998, 1.761, 1.7409999999999999, 1.6609999999999998, 1.551, 1.4109999999999998, 1.2309999999999999, 1.251, 1.121, 1.2409999999999999, 1.291, 1.311, 1.371, 0.8859557522123894, 0.001, 0.9184311926605504, 1.311, 2.201},
            new double[]{1.6709999999999998, 1.111, 1.101, 2.851, 1.091, 1.121, 0, 1.771, 0, 3.581, 1.081, 2.0309999999999997, 4.341, 1.311, 1.551, 1.821, 1.3809999999999998, 1.4709999999999999, 1.111, 1.1509999999999998, 1.1909999999999998, 1.291, 1.071, 1.511, 1.1909999999999998, 1.4709999999999999, 0.78225, 0.001, 1.281, 1.541, 4.841},
            new double[]{1.9809999999999999, 1.1409999999999998, 1.2309999999999999, 1.6709999999999998, 1.021, 1.4409999999999998, 0, 1.4109999999999998, 0, 0.9443962264150942, 1.1309999999999998, 1.6409999999999998, 2.171, 1.301, 0.8938571428571428, 1.011, 1.4009999999999998, 1.3909999999999998, 1.341, 1.121, 1.1409999999999998, 1.2309999999999999, 1.1409999999999998, 1.581, 1.1409999999999998, 1.501, 0.7761937984496123, 0.001, 1.4909999999999999, 1.291, 1.331},
            new double[]{1.7109999999999999, 1.6709999999999998, 1.6309999999999998, 3.181, 2.141, 2.991, 0, 1.1809999999999998, 0, 2.971, 1.361, 1.801, 4.131, 2.501, 5.311, 7.291, 3.741, 5.19100001, 1.9709999999999999, 1.301, 1.351, 1.001, 3.061, 3.0509999999999997, 1.331, 2.931, 0.7052253521126761, 0.6545947712418301, 1.061, 2.691, 7.791},
            new double[]{1.3809999999999998, 0.9910990099009901, 1.011, 1.331, 1.101, 1.501, 0, 0.9184311926605504, 0, 2.0509999999999997, 0.9355794392523364, 1.2309999999999999, 3.371, 0.6461612903225806, 1.561, 2.101, 1.831, 1.9609999999999999, 0.5329148936170213, 0.8343333333333334, 0.8413361344537815, 0.801, 1.021, 1.341, 0.8343333333333334, 1.551, 0.9100909090909091, 0.001, 1.111, 1.281, 2.701},
            new double[]{0.7003006993006994, 1.1409999999999998, 1.2409999999999999, 1.351, 1.001, 1.031, 0, 1.1409999999999998, 0, 3.3409999999999997, 1.121, 1.081, 1.541, 1.4709999999999999, 2.381, 2.751, 1.7209999999999999, 1.9209999999999998, 1.361, 1.2309999999999999, 1.2309999999999999, 1.041, 1.2009999999999998, 1.341, 1.271, 1.4409999999999998, 0.8705652173913044, 0.001, 0.8413361344537815, 1.361, 2.421},
            new double[]{1.041, 1.011, 1.011, 0.9533809523809523, 1.001, 0.9813921568627451, 0, 0.9625384615384615, 0, 1.011, 1.001, 0.9910990099009901, 0.8557008547008548, 1.1509999999999998, 1.021, 0.971873786407767, 1.031, 0.9910990099009901, 1.001, 1.011, 1.011, 1.041, 1.011, 0.9813921568627451, 1.001, 1.001, 1.011, 0.3978253968253968, 0.9625384615384615, 1.021, 1.1409999999999998},
            new double[]{1.831, 1.781, 1.8909999999999998, 2.0309999999999997, 2.171, 1.051, 0, 1.751, 0, 0.001, 1.301, 1.861, 1.4709999999999999, 4.621, 3.581, 2.891, 1.4709999999999999, 1.011, 4.19100001, 3.251, 3.951, 1.9309999999999998, 3.711, 1.531, 3.8209999999999997, 1.801, 0.8413361344537815, 0.001, 1.4409999999999998, 1.531, 0.5112040816326531},
            new double[]{2.021, 1.521, 1.4009999999999998, 1.301, 1.4409999999999998, 1.1709999999999998, 0, 1.101, 0, 0.001, 1.331, 1.4709999999999999, 0.001, 2.831, 1.4309999999999998, 1.841, 1.251, 1.4409999999999998, 4.23100001, 1.9809999999999999, 2.131, 1.801, 2.3009999999999997, 1.2109999999999999, 2.161, 0.9910990099009901, 0.801, 0.001, 1.1409999999999998, 1.2309999999999999, 1.291},
            new double[]{1.2009999999999998, 1.2409999999999999, 1.1609999999999998, 1.9809999999999999, 1.4409999999999998, 2.431, 0, 1.4409999999999998, 0, 5.721, 1.1709999999999998, 1.4909999999999999, 4.90100001, 1.261, 2.981, 3.3409999999999997, 2.311, 2.6109999999999998, 0.5627977528089888, 0.971873786407767, 1.001, 0.7362941176470588, 1.4409999999999998, 1.571, 1.001, 1.811, 0.8781929824561404, 0.001, 1.301, 1.811, 5.121},
            new double[]{1.9009999999999998, 2.191, 2.211, 2.121, 2.771, 1.7409999999999999, 0, 1.9609999999999999, 0, 0.7643587786259541, 1.371, 1.6909999999999998, 1.761, 4.751, 4.32100001, 3.8209999999999997, 1.1309999999999998, 2.001, 5.791, 3.5109999999999997, 4.28100001, 2.061, 3.5109999999999997, 1.4309999999999998, 3.831, 1.541, 0.9100909090909091, 0.001, 1.351, 1.4409999999999998, 0.9184311926605504},
            //new double[]{}
    };

    void createBedPCA(ResultCollector collector) {
        List<TestResult> inOutResults = collector.getInOutResults(true);

        double[] user = inOutResults.stream().map(TestResult::getEffectSize).mapToDouble(Double::doubleValue).toArray();
        //pointsArray[pointsArray.length-1] = user;

        //create real matrix
        RealMatrix realMatrix = MatrixUtils.createRealMatrix(pointsArray);
        realMatrix = realMatrix.transpose();

        //create covariance matrix of points, then find eigen vectors
        //see https://stats.stackexchange.com/questions/2691/making-sense-of-principal-component-analysis-eigenvectors-eigenvalues

        Covariance covariance = new Covariance(realMatrix);
        RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();
        EigenDecomposition ed = new EigenDecomposition(covarianceMatrix);

        SortedMap<String, double[]> pca = new TreeMap<>();

        for (int i = 0; i < ed.getRealEigenvalues().length; i++) {
            RealVector eigenvector = ed.getEigenvector(i);
            pca.put(names[i], Arrays.copyOfRange(eigenvector.toArray(), 0, 2));
        }

        collector.setPCA(pca);
    }
}
